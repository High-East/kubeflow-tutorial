apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: catboost-pipeline-
  annotations: {pipelines.kubeflow.org/kfp_sdk_version: 1.4.0, pipelines.kubeflow.org/pipeline_compilation_time: '2021-03-25T09:11:13.749119',
    pipelines.kubeflow.org/pipeline_spec: '{"name": "Catboost pipeline"}'}
  labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.4.0}
spec:
  entrypoint: catboost-pipeline
  templates:
  - name: catboost-pipeline
    dag:
      tasks:
      - name: catboost-predict-class-probabilities
        template: catboost-predict-class-probabilities
        dependencies: [catboost-train-classifier, pandas-transform-dataframe-in-csv-format]
        arguments:
          artifacts:
          - {name: catboost-train-classifier-model, from: '{{tasks.catboost-train-classifier.outputs.artifacts.catboost-train-classifier-model}}'}
          - {name: pandas-transform-dataframe-in-csv-format-transformed_table, from: '{{tasks.pandas-transform-dataframe-in-csv-format.outputs.artifacts.pandas-transform-dataframe-in-csv-format-transformed_table}}'}
      - name: catboost-predict-classes
        template: catboost-predict-classes
        dependencies: [catboost-train-classifier, pandas-transform-dataframe-in-csv-format]
        arguments:
          artifacts:
          - {name: catboost-train-classifier-model, from: '{{tasks.catboost-train-classifier.outputs.artifacts.catboost-train-classifier-model}}'}
          - {name: pandas-transform-dataframe-in-csv-format-transformed_table, from: '{{tasks.pandas-transform-dataframe-in-csv-format.outputs.artifacts.pandas-transform-dataframe-in-csv-format-transformed_table}}'}
      - name: catboost-predict-values
        template: catboost-predict-values
        dependencies: [catboost-train-regression, chicago-taxi-trips-dataset]
        arguments:
          artifacts:
          - {name: catboost-train-regression-model, from: '{{tasks.catboost-train-regression.outputs.artifacts.catboost-train-regression-model}}'}
          - {name: chicago-taxi-trips-dataset-Table, from: '{{tasks.chicago-taxi-trips-dataset.outputs.artifacts.chicago-taxi-trips-dataset-Table}}'}
      - name: catboost-train-classifier
        template: catboost-train-classifier
        dependencies: [pandas-transform-dataframe-in-csv-format]
        arguments:
          artifacts:
          - {name: pandas-transform-dataframe-in-csv-format-transformed_table, from: '{{tasks.pandas-transform-dataframe-in-csv-format.outputs.artifacts.pandas-transform-dataframe-in-csv-format-transformed_table}}'}
      - name: catboost-train-regression
        template: catboost-train-regression
        dependencies: [chicago-taxi-trips-dataset]
        arguments:
          artifacts:
          - {name: chicago-taxi-trips-dataset-Table, from: '{{tasks.chicago-taxi-trips-dataset.outputs.artifacts.chicago-taxi-trips-dataset-Table}}'}
      - {name: chicago-taxi-trips-dataset, template: chicago-taxi-trips-dataset}
      - name: convert-catboostmodel-to-applecoremlmodel
        template: convert-catboostmodel-to-applecoremlmodel
        dependencies: [catboost-train-regression]
        arguments:
          artifacts:
          - {name: catboost-train-regression-model, from: '{{tasks.catboost-train-regression.outputs.artifacts.catboost-train-regression-model}}'}
      - name: convert-catboostmodel-to-applecoremlmodel-2
        template: convert-catboostmodel-to-applecoremlmodel-2
        dependencies: [catboost-train-classifier]
        arguments:
          artifacts:
          - {name: catboost-train-classifier-model, from: '{{tasks.catboost-train-classifier.outputs.artifacts.catboost-train-classifier-model}}'}
      - name: convert-catboostmodel-to-onnx
        template: convert-catboostmodel-to-onnx
        dependencies: [catboost-train-regression]
        arguments:
          artifacts:
          - {name: catboost-train-regression-model, from: '{{tasks.catboost-train-regression.outputs.artifacts.catboost-train-regression-model}}'}
      - name: convert-catboostmodel-to-onnx-2
        template: convert-catboostmodel-to-onnx-2
        dependencies: [catboost-train-classifier]
        arguments:
          artifacts:
          - {name: catboost-train-classifier-model, from: '{{tasks.catboost-train-classifier.outputs.artifacts.catboost-train-classifier-model}}'}
      - name: pandas-transform-dataframe-in-csv-format
        template: pandas-transform-dataframe-in-csv-format
        dependencies: [chicago-taxi-trips-dataset]
        arguments:
          artifacts:
          - {name: chicago-taxi-trips-dataset-Table, from: '{{tasks.chicago-taxi-trips-dataset.outputs.artifacts.chicago-taxi-trips-dataset-Table}}'}
  - name: catboost-predict-class-probabilities
    container:
      args: [--data, /tmp/inputs/data/data, --model, /tmp/inputs/model/data, --label-column,
        '0', --predictions, /tmp/outputs/predictions/data]
      command:
      - sh
      - -c
      - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
        'catboost==0.23' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install
        --quiet --no-warn-script-location 'catboost==0.23' --user) && "$0" "$@"
      - python3
      - -u
      - -c
      - |
        def _make_parent_dirs_and_return_path(file_path: str):
            import os
            os.makedirs(os.path.dirname(file_path), exist_ok=True)
            return file_path

        def catboost_predict_class_probabilities(
            data_path,
            model_path,
            predictions_path,

            label_column = None,
        ):
            '''Predict class probabilities with a CatBoost model.

            Args:
                data_path: Path for the data in CSV format.
                model_path: Path for the trained model in binary CatBoostModel format.
                label_column: Column containing the label data.
                predictions_path: Output path for the predictions.

            Outputs:
                predictions: Predictions in text format.

            Annotations:
                author: Alexey Volkov <alexey.volkov@ark-kun.com>
            '''
            import tempfile

            from catboost import CatBoost, Pool
            import numpy

            if label_column:
                column_descriptions = {label_column: 'Label'}
                column_description_path = tempfile.NamedTemporaryFile(delete=False).name
                with open(column_description_path, 'w') as column_description_file:
                    for idx, kind in column_descriptions.items():
                        column_description_file.write('{}\t{}\n'.format(idx, kind))
            else:
                column_description_path = None

            eval_data = Pool(
                data_path,
                column_description=column_description_path,
                has_header=True,
                delimiter=',',
            )

            model = CatBoost()
            model.load_model(model_path)

            predictions = model.predict(eval_data, prediction_type='Probability')
            numpy.savetxt(predictions_path, predictions)

        import argparse
        _parser = argparse.ArgumentParser(prog='Catboost predict class probabilities', description='Predict class probabilities with a CatBoost model.\n\n    Args:\n        data_path: Path for the data in CSV format.\n        model_path: Path for the trained model in binary CatBoostModel format.\n        label_column: Column containing the label data.\n        predictions_path: Output path for the predictions.\n\n    Outputs:\n        predictions: Predictions in text format.\n\n    Annotations:\n        author: Alexey Volkov <alexey.volkov@ark-kun.com>')
        _parser.add_argument("--data", dest="data_path", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--model", dest="model_path", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--label-column", dest="label_column", type=int, required=False, default=argparse.SUPPRESS)
        _parser.add_argument("--predictions", dest="predictions_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())

        _outputs = catboost_predict_class_probabilities(**_parsed_args)
      image: python:3.7
    inputs:
      artifacts:
      - {name: pandas-transform-dataframe-in-csv-format-transformed_table, path: /tmp/inputs/data/data}
      - {name: catboost-train-classifier-model, path: /tmp/inputs/model/data}
    outputs:
      artifacts:
      - {name: catboost-predict-class-probabilities-predictions, path: /tmp/outputs/predictions/data}
    metadata:
      annotations: {pipelines.kubeflow.org/component_spec: '{"description": "Predict
          class probabilities with a CatBoost model.\n\n    Args:\n        data_path:
          Path for the data in CSV format.\n        model_path: Path for the trained
          model in binary CatBoostModel format.\n        label_column: Column containing
          the label data.\n        predictions_path: Output path for the predictions.\n\n    Outputs:\n        predictions:
          Predictions in text format.\n\n    Annotations:\n        author: Alexey
          Volkov <alexey.volkov@ark-kun.com>", "implementation": {"container": {"args":
          ["--data", {"inputPath": "data"}, "--model", {"inputPath": "model"}, {"if":
          {"cond": {"isPresent": "label_column"}, "then": ["--label-column", {"inputValue":
          "label_column"}]}}, "--predictions", {"outputPath": "predictions"}], "command":
          ["sh", "-c", "(PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet
          --no-warn-script-location ''catboost==0.23'' || PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''catboost==0.23''
          --user) && \"$0\" \"$@\"", "python3", "-u", "-c", "def _make_parent_dirs_and_return_path(file_path:
          str):\n    import os\n    os.makedirs(os.path.dirname(file_path), exist_ok=True)\n    return
          file_path\n\ndef catboost_predict_class_probabilities(\n    data_path,\n    model_path,\n    predictions_path,\n\n    label_column
          = None,\n):\n    ''''''Predict class probabilities with a CatBoost model.\n\n    Args:\n        data_path:
          Path for the data in CSV format.\n        model_path: Path for the trained
          model in binary CatBoostModel format.\n        label_column: Column containing
          the label data.\n        predictions_path: Output path for the predictions.\n\n    Outputs:\n        predictions:
          Predictions in text format.\n\n    Annotations:\n        author: Alexey
          Volkov <alexey.volkov@ark-kun.com>\n    ''''''\n    import tempfile\n\n    from
          catboost import CatBoost, Pool\n    import numpy\n\n    if label_column:\n        column_descriptions
          = {label_column: ''Label''}\n        column_description_path = tempfile.NamedTemporaryFile(delete=False).name\n        with
          open(column_description_path, ''w'') as column_description_file:\n            for
          idx, kind in column_descriptions.items():\n                column_description_file.write(''{}\\t{}\\n''.format(idx,
          kind))\n    else:\n        column_description_path = None\n\n    eval_data
          = Pool(\n        data_path,\n        column_description=column_description_path,\n        has_header=True,\n        delimiter='','',\n    )\n\n    model
          = CatBoost()\n    model.load_model(model_path)\n\n    predictions = model.predict(eval_data,
          prediction_type=''Probability'')\n    numpy.savetxt(predictions_path, predictions)\n\nimport
          argparse\n_parser = argparse.ArgumentParser(prog=''Catboost predict class
          probabilities'', description=''Predict class probabilities with a CatBoost
          model.\\n\\n    Args:\\n        data_path: Path for the data in CSV format.\\n        model_path:
          Path for the trained model in binary CatBoostModel format.\\n        label_column:
          Column containing the label data.\\n        predictions_path: Output path
          for the predictions.\\n\\n    Outputs:\\n        predictions: Predictions
          in text format.\\n\\n    Annotations:\\n        author: Alexey Volkov <alexey.volkov@ark-kun.com>'')\n_parser.add_argument(\"--data\",
          dest=\"data_path\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--model\",
          dest=\"model_path\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--label-column\",
          dest=\"label_column\", type=int, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--predictions\",
          dest=\"predictions_path\", type=_make_parent_dirs_and_return_path, required=True,
          default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n_outputs
          = catboost_predict_class_probabilities(**_parsed_args)\n"], "image": "python:3.7"}},
          "inputs": [{"name": "data", "type": "CSV"}, {"name": "model", "type": "CatBoostModel"},
          {"name": "label_column", "optional": true, "type": "Integer"}], "name":
          "Catboost predict class probabilities", "outputs": [{"name": "predictions"}]}',
        pipelines.kubeflow.org/component_ref: '{"digest": "91b74de3ab6927877fdf333a1fdf00eaabd44032c74027696079e2559832193c",
          "url": "https://raw.githubusercontent.com/kubeflow/pipelines/f97ad2/components/CatBoost/Predict_class_probabilities/from_CSV/component.yaml"}',
        pipelines.kubeflow.org/arguments.parameters: '{"label_column": "0"}'}
  - name: catboost-predict-classes
    container:
      args: [--data, /tmp/inputs/data/data, --model, /tmp/inputs/model/data, --label-column,
        '0', --predictions, /tmp/outputs/predictions/data]
      command:
      - sh
      - -c
      - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
        'catboost==0.22' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install
        --quiet --no-warn-script-location 'catboost==0.22' --user) && "$0" "$@"
      - python3
      - -u
      - -c
      - |
        def _make_parent_dirs_and_return_path(file_path: str):
            import os
            os.makedirs(os.path.dirname(file_path), exist_ok=True)
            return file_path

        def catboost_predict_classes(
            data_path,
            model_path,
            predictions_path,

            label_column = None,
        ):
            '''Predict classes using the CatBoost classifier model.

            Args:
                data_path: Path for the data in CSV format.
                model_path: Path for the trained model in binary CatBoostModel format.
                label_column: Column containing the label data.
                predictions_path: Output path for the predictions.

            Outputs:
                predictions: Class predictions in text format.

            Annotations:
                author: Alexey Volkov <alexey.volkov@ark-kun.com>
            '''
            import tempfile

            from catboost import CatBoostClassifier, Pool
            import numpy

            if label_column:
                column_descriptions = {label_column: 'Label'}
                column_description_path = tempfile.NamedTemporaryFile(delete=False).name
                with open(column_description_path, 'w') as column_description_file:
                    for idx, kind in column_descriptions.items():
                        column_description_file.write('{}\t{}\n'.format(idx, kind))
            else:
                column_description_path = None

            eval_data = Pool(
                data_path,
                column_description=column_description_path,
                has_header=True,
                delimiter=',',
            )

            model = CatBoostClassifier()
            model.load_model(model_path)

            predictions = model.predict(eval_data)
            numpy.savetxt(predictions_path, predictions, fmt='%s')

        import argparse
        _parser = argparse.ArgumentParser(prog='Catboost predict classes', description='Predict classes using the CatBoost classifier model.\n\n    Args:\n        data_path: Path for the data in CSV format.\n        model_path: Path for the trained model in binary CatBoostModel format.\n        label_column: Column containing the label data.\n        predictions_path: Output path for the predictions.\n\n    Outputs:\n        predictions: Class predictions in text format.\n\n    Annotations:\n        author: Alexey Volkov <alexey.volkov@ark-kun.com>')
        _parser.add_argument("--data", dest="data_path", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--model", dest="model_path", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--label-column", dest="label_column", type=int, required=False, default=argparse.SUPPRESS)
        _parser.add_argument("--predictions", dest="predictions_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())

        _outputs = catboost_predict_classes(**_parsed_args)
      image: python:3.7
    inputs:
      artifacts:
      - {name: pandas-transform-dataframe-in-csv-format-transformed_table, path: /tmp/inputs/data/data}
      - {name: catboost-train-classifier-model, path: /tmp/inputs/model/data}
    outputs:
      artifacts:
      - {name: catboost-predict-classes-predictions, path: /tmp/outputs/predictions/data}
    metadata:
      annotations: {pipelines.kubeflow.org/component_spec: '{"description": "Predict
          classes using the CatBoost classifier model.\n\n    Args:\n        data_path:
          Path for the data in CSV format.\n        model_path: Path for the trained
          model in binary CatBoostModel format.\n        label_column: Column containing
          the label data.\n        predictions_path: Output path for the predictions.\n\n    Outputs:\n        predictions:
          Class predictions in text format.\n\n    Annotations:\n        author: Alexey
          Volkov <alexey.volkov@ark-kun.com>", "implementation": {"container": {"args":
          ["--data", {"inputPath": "data"}, "--model", {"inputPath": "model"}, {"if":
          {"cond": {"isPresent": "label_column"}, "then": ["--label-column", {"inputValue":
          "label_column"}]}}, "--predictions", {"outputPath": "predictions"}], "command":
          ["sh", "-c", "(PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet
          --no-warn-script-location ''catboost==0.22'' || PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''catboost==0.22''
          --user) && \"$0\" \"$@\"", "python3", "-u", "-c", "def _make_parent_dirs_and_return_path(file_path:
          str):\n    import os\n    os.makedirs(os.path.dirname(file_path), exist_ok=True)\n    return
          file_path\n\ndef catboost_predict_classes(\n    data_path,\n    model_path,\n    predictions_path,\n\n    label_column
          = None,\n):\n    ''''''Predict classes using the CatBoost classifier model.\n\n    Args:\n        data_path:
          Path for the data in CSV format.\n        model_path: Path for the trained
          model in binary CatBoostModel format.\n        label_column: Column containing
          the label data.\n        predictions_path: Output path for the predictions.\n\n    Outputs:\n        predictions:
          Class predictions in text format.\n\n    Annotations:\n        author: Alexey
          Volkov <alexey.volkov@ark-kun.com>\n    ''''''\n    import tempfile\n\n    from
          catboost import CatBoostClassifier, Pool\n    import numpy\n\n    if label_column:\n        column_descriptions
          = {label_column: ''Label''}\n        column_description_path = tempfile.NamedTemporaryFile(delete=False).name\n        with
          open(column_description_path, ''w'') as column_description_file:\n            for
          idx, kind in column_descriptions.items():\n                column_description_file.write(''{}\\t{}\\n''.format(idx,
          kind))\n    else:\n        column_description_path = None\n\n    eval_data
          = Pool(\n        data_path,\n        column_description=column_description_path,\n        has_header=True,\n        delimiter='','',\n    )\n\n    model
          = CatBoostClassifier()\n    model.load_model(model_path)\n\n    predictions
          = model.predict(eval_data)\n    numpy.savetxt(predictions_path, predictions,
          fmt=''%s'')\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Catboost
          predict classes'', description=''Predict classes using the CatBoost classifier
          model.\\n\\n    Args:\\n        data_path: Path for the data in CSV format.\\n        model_path:
          Path for the trained model in binary CatBoostModel format.\\n        label_column:
          Column containing the label data.\\n        predictions_path: Output path
          for the predictions.\\n\\n    Outputs:\\n        predictions: Class predictions
          in text format.\\n\\n    Annotations:\\n        author: Alexey Volkov <alexey.volkov@ark-kun.com>'')\n_parser.add_argument(\"--data\",
          dest=\"data_path\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--model\",
          dest=\"model_path\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--label-column\",
          dest=\"label_column\", type=int, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--predictions\",
          dest=\"predictions_path\", type=_make_parent_dirs_and_return_path, required=True,
          default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n_outputs
          = catboost_predict_classes(**_parsed_args)\n"], "image": "python:3.7"}},
          "inputs": [{"name": "data", "type": "CSV"}, {"name": "model", "type": "CatBoostModel"},
          {"name": "label_column", "optional": true, "type": "Integer"}], "name":
          "Catboost predict classes", "outputs": [{"name": "predictions"}]}', pipelines.kubeflow.org/component_ref: '{"digest":
          "fa33cc85d9d7219354f2aeec06bcd7026e0d1d2bb0944445f6e24e57ee994545", "url":
          "https://raw.githubusercontent.com/kubeflow/pipelines/f97ad2/components/CatBoost/Predict_classes/from_CSV/component.yaml"}',
        pipelines.kubeflow.org/arguments.parameters: '{"label_column": "0"}'}
  - name: catboost-predict-values
    container:
      args: [--data, /tmp/inputs/data/data, --model, /tmp/inputs/model/data, --label-column,
        '0', --predictions, /tmp/outputs/predictions/data]
      command:
      - sh
      - -c
      - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
        'catboost==0.23' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install
        --quiet --no-warn-script-location 'catboost==0.23' --user) && "$0" "$@"
      - python3
      - -u
      - -c
      - |
        def _make_parent_dirs_and_return_path(file_path: str):
            import os
            os.makedirs(os.path.dirname(file_path), exist_ok=True)
            return file_path

        def catboost_predict_values(
            data_path,
            model_path,
            predictions_path,

            label_column = None,
        ):
            '''Predict values with a CatBoost model.

            Args:
                data_path: Path for the data in CSV format.
                model_path: Path for the trained model in binary CatBoostModel format.
                label_column: Column containing the label data.
                predictions_path: Output path for the predictions.

            Outputs:
                predictions: Predictions in text format.

            Annotations:
                author: Alexey Volkov <alexey.volkov@ark-kun.com>
            '''
            import tempfile

            from catboost import CatBoost, Pool
            import numpy

            if label_column:
                column_descriptions = {label_column: 'Label'}
                column_description_path = tempfile.NamedTemporaryFile(delete=False).name
                with open(column_description_path, 'w') as column_description_file:
                    for idx, kind in column_descriptions.items():
                        column_description_file.write('{}\t{}\n'.format(idx, kind))
            else:
                column_description_path = None

            eval_data = Pool(
                data_path,
                column_description=column_description_path,
                has_header=True,
                delimiter=',',
            )

            model = CatBoost()
            model.load_model(model_path)

            predictions = model.predict(eval_data, prediction_type='RawFormulaVal')
            numpy.savetxt(predictions_path, predictions)

        import argparse
        _parser = argparse.ArgumentParser(prog='Catboost predict values', description='Predict values with a CatBoost model.\n\n    Args:\n        data_path: Path for the data in CSV format.\n        model_path: Path for the trained model in binary CatBoostModel format.\n        label_column: Column containing the label data.\n        predictions_path: Output path for the predictions.\n\n    Outputs:\n        predictions: Predictions in text format.\n\n    Annotations:\n        author: Alexey Volkov <alexey.volkov@ark-kun.com>')
        _parser.add_argument("--data", dest="data_path", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--model", dest="model_path", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--label-column", dest="label_column", type=int, required=False, default=argparse.SUPPRESS)
        _parser.add_argument("--predictions", dest="predictions_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())

        _outputs = catboost_predict_values(**_parsed_args)
      image: python:3.7
    inputs:
      artifacts:
      - {name: chicago-taxi-trips-dataset-Table, path: /tmp/inputs/data/data}
      - {name: catboost-train-regression-model, path: /tmp/inputs/model/data}
    outputs:
      artifacts:
      - {name: catboost-predict-values-predictions, path: /tmp/outputs/predictions/data}
    metadata:
      annotations: {pipelines.kubeflow.org/component_spec: '{"description": "Predict
          values with a CatBoost model.\n\n    Args:\n        data_path: Path for
          the data in CSV format.\n        model_path: Path for the trained model
          in binary CatBoostModel format.\n        label_column: Column containing
          the label data.\n        predictions_path: Output path for the predictions.\n\n    Outputs:\n        predictions:
          Predictions in text format.\n\n    Annotations:\n        author: Alexey
          Volkov <alexey.volkov@ark-kun.com>", "implementation": {"container": {"args":
          ["--data", {"inputPath": "data"}, "--model", {"inputPath": "model"}, {"if":
          {"cond": {"isPresent": "label_column"}, "then": ["--label-column", {"inputValue":
          "label_column"}]}}, "--predictions", {"outputPath": "predictions"}], "command":
          ["sh", "-c", "(PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet
          --no-warn-script-location ''catboost==0.23'' || PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''catboost==0.23''
          --user) && \"$0\" \"$@\"", "python3", "-u", "-c", "def _make_parent_dirs_and_return_path(file_path:
          str):\n    import os\n    os.makedirs(os.path.dirname(file_path), exist_ok=True)\n    return
          file_path\n\ndef catboost_predict_values(\n    data_path,\n    model_path,\n    predictions_path,\n\n    label_column
          = None,\n):\n    ''''''Predict values with a CatBoost model.\n\n    Args:\n        data_path:
          Path for the data in CSV format.\n        model_path: Path for the trained
          model in binary CatBoostModel format.\n        label_column: Column containing
          the label data.\n        predictions_path: Output path for the predictions.\n\n    Outputs:\n        predictions:
          Predictions in text format.\n\n    Annotations:\n        author: Alexey
          Volkov <alexey.volkov@ark-kun.com>\n    ''''''\n    import tempfile\n\n    from
          catboost import CatBoost, Pool\n    import numpy\n\n    if label_column:\n        column_descriptions
          = {label_column: ''Label''}\n        column_description_path = tempfile.NamedTemporaryFile(delete=False).name\n        with
          open(column_description_path, ''w'') as column_description_file:\n            for
          idx, kind in column_descriptions.items():\n                column_description_file.write(''{}\\t{}\\n''.format(idx,
          kind))\n    else:\n        column_description_path = None\n\n    eval_data
          = Pool(\n        data_path,\n        column_description=column_description_path,\n        has_header=True,\n        delimiter='','',\n    )\n\n    model
          = CatBoost()\n    model.load_model(model_path)\n\n    predictions = model.predict(eval_data,
          prediction_type=''RawFormulaVal'')\n    numpy.savetxt(predictions_path,
          predictions)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Catboost
          predict values'', description=''Predict values with a CatBoost model.\\n\\n    Args:\\n        data_path:
          Path for the data in CSV format.\\n        model_path: Path for the trained
          model in binary CatBoostModel format.\\n        label_column: Column containing
          the label data.\\n        predictions_path: Output path for the predictions.\\n\\n    Outputs:\\n        predictions:
          Predictions in text format.\\n\\n    Annotations:\\n        author: Alexey
          Volkov <alexey.volkov@ark-kun.com>'')\n_parser.add_argument(\"--data\",
          dest=\"data_path\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--model\",
          dest=\"model_path\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--label-column\",
          dest=\"label_column\", type=int, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--predictions\",
          dest=\"predictions_path\", type=_make_parent_dirs_and_return_path, required=True,
          default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n_outputs
          = catboost_predict_values(**_parsed_args)\n"], "image": "python:3.7"}},
          "inputs": [{"name": "data", "type": "CSV"}, {"name": "model", "type": "CatBoostModel"},
          {"name": "label_column", "optional": true, "type": "Integer"}], "name":
          "Catboost predict values", "outputs": [{"name": "predictions"}]}', pipelines.kubeflow.org/component_ref: '{"digest":
          "272cf69b26d4264c39fac37e65b03a7ec4d687ec342188437937220c7afa8603", "url":
          "https://raw.githubusercontent.com/kubeflow/pipelines/f97ad2/components/CatBoost/Predict_values/from_CSV/component.yaml"}',
        pipelines.kubeflow.org/arguments.parameters: '{"label_column": "0"}'}
  - name: catboost-train-classifier
    container:
      args: [--training-data, /tmp/inputs/training_data/data, --label-column, '0',
        --num-iterations, '200', --model, /tmp/outputs/model/data]
      command:
      - sh
      - -c
      - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
        'catboost==0.23' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install
        --quiet --no-warn-script-location 'catboost==0.23' --user) && "$0" "$@"
      - python3
      - -u
      - -c
      - |
        def _make_parent_dirs_and_return_path(file_path: str):
            import os
            os.makedirs(os.path.dirname(file_path), exist_ok=True)
            return file_path

        def catboost_train_classifier(
            training_data_path,
            model_path,
            starting_model_path = None,
            label_column = 0,

            loss_function = 'Logloss',
            num_iterations = 500,
            learning_rate = None,
            depth = 6,
            random_seed = 0,

            cat_features = None,
            text_features = None,

            additional_training_options = {},
        ):
            '''Train a CatBoost classifier model.

            Args:
                training_data_path: Path for the training data in CSV format.
                model_path: Output path for the trained model in binary CatBoostModel format.
                starting_model_path: Path for the existing trained model to start from.
                label_column: Column containing the label data.

                loss_function: The metric to use in training and also selector of the machine learning
                    problem to solve. Default = 'Logloss'
                num_iterations: Number of trees to add to the ensemble.
                learning_rate: Step size shrinkage used in update to prevents overfitting.
                    Default value is selected automatically for binary classification with other parameters set to default.
                    In all other cases default is 0.03.
                depth: Depth of a tree. All trees are the same depth. Default = 6
                random_seed: Random number seed. Default = 0

                cat_features: A list of Categorical features (indices or names).
                text_features: A list of Text features (indices or names).
                additional_training_options: A dictionary with additional options to pass to CatBoostClassifier

            Outputs:
                model: Trained model in binary CatBoostModel format.

            Annotations:
                author: Alexey Volkov <alexey.volkov@ark-kun.com>
            '''
            import tempfile
            from pathlib import Path

            from catboost import CatBoostClassifier, Pool

            column_descriptions = {label_column: 'Label'}
            column_description_path = tempfile.NamedTemporaryFile(delete=False).name
            with open(column_description_path, 'w') as column_description_file:
                for idx, kind in column_descriptions.items():
                    column_description_file.write('{}\t{}\n'.format(idx, kind))

            train_data = Pool(
                training_data_path,
                column_description=column_description_path,
                has_header=True,
                delimiter=',',
            )

            model = CatBoostClassifier(
                iterations=num_iterations,
                depth=depth,
                learning_rate=learning_rate,
                loss_function=loss_function,
                random_seed=random_seed,
                verbose=True,
                **additional_training_options,
            )

            model.fit(
                train_data,
                cat_features=cat_features,
                text_features=text_features,
                init_model=starting_model_path,
                #verbose=False,
                #plot=True,
            )
            Path(model_path).parent.mkdir(parents=True, exist_ok=True)
            model.save_model(model_path)

        import json
        import argparse
        _parser = argparse.ArgumentParser(prog='Catboost train classifier', description="Train a CatBoost classifier model.\n\n    Args:\n        training_data_path: Path for the training data in CSV format.\n        model_path: Output path for the trained model in binary CatBoostModel format.\n        starting_model_path: Path for the existing trained model to start from.\n        label_column: Column containing the label data.\n\n        loss_function: The metric to use in training and also selector of the machine learning\n            problem to solve. Default = 'Logloss'\n        num_iterations: Number of trees to add to the ensemble.\n        learning_rate: Step size shrinkage used in update to prevents overfitting.\n            Default value is selected automatically for binary classification with other parameters set to default.\n            In all other cases default is 0.03.\n        depth: Depth of a tree. All trees are the same depth. Default = 6\n        random_seed: Random number seed. Default = 0\n\n        cat_features: A list of Categorical features (indices or names).\n        text_features: A list of Text features (indices or names).\n        additional_training_options: A dictionary with additional options to pass to CatBoostClassifier\n\n    Outputs:\n        model: Trained model in binary CatBoostModel format.\n\n    Annotations:\n        author: Alexey Volkov <alexey.volkov@ark-kun.com>")
        _parser.add_argument("--training-data", dest="training_data_path", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--starting-model", dest="starting_model_path", type=str, required=False, default=argparse.SUPPRESS)
        _parser.add_argument("--label-column", dest="label_column", type=int, required=False, default=argparse.SUPPRESS)
        _parser.add_argument("--loss-function", dest="loss_function", type=str, required=False, default=argparse.SUPPRESS)
        _parser.add_argument("--num-iterations", dest="num_iterations", type=int, required=False, default=argparse.SUPPRESS)
        _parser.add_argument("--learning-rate", dest="learning_rate", type=float, required=False, default=argparse.SUPPRESS)
        _parser.add_argument("--depth", dest="depth", type=int, required=False, default=argparse.SUPPRESS)
        _parser.add_argument("--random-seed", dest="random_seed", type=int, required=False, default=argparse.SUPPRESS)
        _parser.add_argument("--cat-features", dest="cat_features", type=json.loads, required=False, default=argparse.SUPPRESS)
        _parser.add_argument("--text-features", dest="text_features", type=json.loads, required=False, default=argparse.SUPPRESS)
        _parser.add_argument("--additional-training-options", dest="additional_training_options", type=json.loads, required=False, default=argparse.SUPPRESS)
        _parser.add_argument("--model", dest="model_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())

        _outputs = catboost_train_classifier(**_parsed_args)
      image: python:3.7
    inputs:
      artifacts:
      - {name: pandas-transform-dataframe-in-csv-format-transformed_table, path: /tmp/inputs/training_data/data}
    outputs:
      artifacts:
      - {name: catboost-train-classifier-model, path: /tmp/outputs/model/data}
    metadata:
      annotations: {pipelines.kubeflow.org/component_spec: '{"description": "Train
          a CatBoost classifier model.\n\n    Args:\n        training_data_path: Path
          for the training data in CSV format.\n        model_path: Output path for
          the trained model in binary CatBoostModel format.\n        starting_model_path:
          Path for the existing trained model to start from.\n        label_column:
          Column containing the label data.\n\n        loss_function: The metric to
          use in training and also selector of the machine learning\n            problem
          to solve. Default = ''Logloss''\n        num_iterations: Number of trees
          to add to the ensemble.\n        learning_rate: Step size shrinkage used
          in update to prevents overfitting.\n            Default value is selected
          automatically for binary classification with other parameters set to default.\n            In
          all other cases default is 0.03.\n        depth: Depth of a tree. All trees
          are the same depth. Default = 6\n        random_seed: Random number seed.
          Default = 0\n\n        cat_features: A list of Categorical features (indices
          or names).\n        text_features: A list of Text features (indices or names).\n        additional_training_options:
          A dictionary with additional options to pass to CatBoostClassifier\n\n    Outputs:\n        model:
          Trained model in binary CatBoostModel format.\n\n    Annotations:\n        author:
          Alexey Volkov <alexey.volkov@ark-kun.com>", "implementation": {"container":
          {"args": ["--training-data", {"inputPath": "training_data"}, {"if": {"cond":
          {"isPresent": "starting_model"}, "then": ["--starting-model", {"inputPath":
          "starting_model"}]}}, {"if": {"cond": {"isPresent": "label_column"}, "then":
          ["--label-column", {"inputValue": "label_column"}]}}, {"if": {"cond": {"isPresent":
          "loss_function"}, "then": ["--loss-function", {"inputValue": "loss_function"}]}},
          {"if": {"cond": {"isPresent": "num_iterations"}, "then": ["--num-iterations",
          {"inputValue": "num_iterations"}]}}, {"if": {"cond": {"isPresent": "learning_rate"},
          "then": ["--learning-rate", {"inputValue": "learning_rate"}]}}, {"if": {"cond":
          {"isPresent": "depth"}, "then": ["--depth", {"inputValue": "depth"}]}},
          {"if": {"cond": {"isPresent": "random_seed"}, "then": ["--random-seed",
          {"inputValue": "random_seed"}]}}, {"if": {"cond": {"isPresent": "cat_features"},
          "then": ["--cat-features", {"inputValue": "cat_features"}]}}, {"if": {"cond":
          {"isPresent": "text_features"}, "then": ["--text-features", {"inputValue":
          "text_features"}]}}, {"if": {"cond": {"isPresent": "additional_training_options"},
          "then": ["--additional-training-options", {"inputValue": "additional_training_options"}]}},
          "--model", {"outputPath": "model"}], "command": ["sh", "-c", "(PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''catboost==0.23''
          || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
          ''catboost==0.23'' --user) && \"$0\" \"$@\"", "python3", "-u", "-c", "def
          _make_parent_dirs_and_return_path(file_path: str):\n    import os\n    os.makedirs(os.path.dirname(file_path),
          exist_ok=True)\n    return file_path\n\ndef catboost_train_classifier(\n    training_data_path,\n    model_path,\n    starting_model_path
          = None,\n    label_column = 0,\n\n    loss_function = ''Logloss'',\n    num_iterations
          = 500,\n    learning_rate = None,\n    depth = 6,\n    random_seed = 0,\n\n    cat_features
          = None,\n    text_features = None,\n\n    additional_training_options =
          {},\n):\n    ''''''Train a CatBoost classifier model.\n\n    Args:\n        training_data_path:
          Path for the training data in CSV format.\n        model_path: Output path
          for the trained model in binary CatBoostModel format.\n        starting_model_path:
          Path for the existing trained model to start from.\n        label_column:
          Column containing the label data.\n\n        loss_function: The metric to
          use in training and also selector of the machine learning\n            problem
          to solve. Default = ''Logloss''\n        num_iterations: Number of trees
          to add to the ensemble.\n        learning_rate: Step size shrinkage used
          in update to prevents overfitting.\n            Default value is selected
          automatically for binary classification with other parameters set to default.\n            In
          all other cases default is 0.03.\n        depth: Depth of a tree. All trees
          are the same depth. Default = 6\n        random_seed: Random number seed.
          Default = 0\n\n        cat_features: A list of Categorical features (indices
          or names).\n        text_features: A list of Text features (indices or names).\n        additional_training_options:
          A dictionary with additional options to pass to CatBoostClassifier\n\n    Outputs:\n        model:
          Trained model in binary CatBoostModel format.\n\n    Annotations:\n        author:
          Alexey Volkov <alexey.volkov@ark-kun.com>\n    ''''''\n    import tempfile\n    from
          pathlib import Path\n\n    from catboost import CatBoostClassifier, Pool\n\n    column_descriptions
          = {label_column: ''Label''}\n    column_description_path = tempfile.NamedTemporaryFile(delete=False).name\n    with
          open(column_description_path, ''w'') as column_description_file:\n        for
          idx, kind in column_descriptions.items():\n            column_description_file.write(''{}\\t{}\\n''.format(idx,
          kind))\n\n    train_data = Pool(\n        training_data_path,\n        column_description=column_description_path,\n        has_header=True,\n        delimiter='','',\n    )\n\n    model
          = CatBoostClassifier(\n        iterations=num_iterations,\n        depth=depth,\n        learning_rate=learning_rate,\n        loss_function=loss_function,\n        random_seed=random_seed,\n        verbose=True,\n        **additional_training_options,\n    )\n\n    model.fit(\n        train_data,\n        cat_features=cat_features,\n        text_features=text_features,\n        init_model=starting_model_path,\n        #verbose=False,\n        #plot=True,\n    )\n    Path(model_path).parent.mkdir(parents=True,
          exist_ok=True)\n    model.save_model(model_path)\n\nimport json\nimport
          argparse\n_parser = argparse.ArgumentParser(prog=''Catboost train classifier'',
          description=\"Train a CatBoost classifier model.\\n\\n    Args:\\n        training_data_path:
          Path for the training data in CSV format.\\n        model_path: Output path
          for the trained model in binary CatBoostModel format.\\n        starting_model_path:
          Path for the existing trained model to start from.\\n        label_column:
          Column containing the label data.\\n\\n        loss_function: The metric
          to use in training and also selector of the machine learning\\n            problem
          to solve. Default = ''Logloss''\\n        num_iterations: Number of trees
          to add to the ensemble.\\n        learning_rate: Step size shrinkage used
          in update to prevents overfitting.\\n            Default value is selected
          automatically for binary classification with other parameters set to default.\\n            In
          all other cases default is 0.03.\\n        depth: Depth of a tree. All trees
          are the same depth. Default = 6\\n        random_seed: Random number seed.
          Default = 0\\n\\n        cat_features: A list of Categorical features (indices
          or names).\\n        text_features: A list of Text features (indices or
          names).\\n        additional_training_options: A dictionary with additional
          options to pass to CatBoostClassifier\\n\\n    Outputs:\\n        model:
          Trained model in binary CatBoostModel format.\\n\\n    Annotations:\\n        author:
          Alexey Volkov <alexey.volkov@ark-kun.com>\")\n_parser.add_argument(\"--training-data\",
          dest=\"training_data_path\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--starting-model\",
          dest=\"starting_model_path\", type=str, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--label-column\",
          dest=\"label_column\", type=int, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--loss-function\",
          dest=\"loss_function\", type=str, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--num-iterations\",
          dest=\"num_iterations\", type=int, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--learning-rate\",
          dest=\"learning_rate\", type=float, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--depth\",
          dest=\"depth\", type=int, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--random-seed\",
          dest=\"random_seed\", type=int, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--cat-features\",
          dest=\"cat_features\", type=json.loads, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--text-features\",
          dest=\"text_features\", type=json.loads, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--additional-training-options\",
          dest=\"additional_training_options\", type=json.loads, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--model\",
          dest=\"model_path\", type=_make_parent_dirs_and_return_path, required=True,
          default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n_outputs
          = catboost_train_classifier(**_parsed_args)\n"], "image": "python:3.7"}},
          "inputs": [{"name": "training_data", "type": "CSV"}, {"name": "starting_model",
          "optional": true, "type": "CatBoostModel"}, {"default": "0", "name": "label_column",
          "optional": true, "type": "Integer"}, {"default": "Logloss", "name": "loss_function",
          "optional": true, "type": "String"}, {"default": "500", "name": "num_iterations",
          "optional": true, "type": "Integer"}, {"name": "learning_rate", "optional":
          true, "type": "Float"}, {"default": "6", "name": "depth", "optional": true,
          "type": "Integer"}, {"default": "0", "name": "random_seed", "optional":
          true, "type": "Integer"}, {"name": "cat_features", "optional": true, "type":
          "JsonArray"}, {"name": "text_features", "optional": true, "type": "JsonArray"},
          {"default": "{}", "name": "additional_training_options", "optional": true,
          "type": "JsonObject"}], "name": "Catboost train classifier", "outputs":
          [{"name": "model", "type": "CatBoostModel"}]}', pipelines.kubeflow.org/component_ref: '{"digest":
          "92595abcdee0a99378c9a9434d30818cb89f5e6a91902404e7c4b523cd2d4d1f", "url":
          "https://raw.githubusercontent.com/kubeflow/pipelines/f97ad2/components/CatBoost/Train_classifier/from_CSV/component.yaml"}',
        pipelines.kubeflow.org/arguments.parameters: '{"label_column": "0", "num_iterations":
          "200"}'}
  - name: catboost-train-regression
    container:
      args: [--training-data, /tmp/inputs/training_data/data, --label-column, '0',
        --loss-function, RMSE, --num-iterations, '200', --model, /tmp/outputs/model/data]
      command:
      - sh
      - -c
      - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
        'catboost==0.23' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install
        --quiet --no-warn-script-location 'catboost==0.23' --user) && "$0" "$@"
      - python3
      - -u
      - -c
      - |
        def _make_parent_dirs_and_return_path(file_path: str):
            import os
            os.makedirs(os.path.dirname(file_path), exist_ok=True)
            return file_path

        def catboost_train_regression(
            training_data_path,
            model_path,
            starting_model_path = None,
            label_column = 0,

            loss_function = 'RMSE',
            num_iterations = 500,
            learning_rate = None,
            depth = 6,
            random_seed = 0,

            cat_features = None,

            additional_training_options = {},
        ):
            '''Train a CatBoost classifier model.

            Args:
                training_data_path: Path for the training data in CSV format.
                model_path: Output path for the trained model in binary CatBoostModel format.
                starting_model_path: Path for the existing trained model to start from.
                label_column: Column containing the label data.

                loss_function: The metric to use in training and also selector of the machine learning
                    problem to solve. Default = 'RMSE'. Possible values:
                    'RMSE', 'MAE', 'Quantile:alpha=value', 'LogLinQuantile:alpha=value', 'Poisson', 'MAPE', 'Lq:q=value'
                num_iterations: Number of trees to add to the ensemble.
                learning_rate: Step size shrinkage used in update to prevents overfitting.
                    Default value is selected automatically for binary classification with other parameters set to default.
                    In all other cases default is 0.03.
                depth: Depth of a tree. All trees are the same depth. Default = 6
                random_seed: Random number seed. Default = 0

                cat_features: A list of Categorical features (indices or names).
                additional_training_options: A dictionary with additional options to pass to CatBoostRegressor

            Outputs:
                model: Trained model in binary CatBoostModel format.

            Annotations:
                author: Alexey Volkov <alexey.volkov@ark-kun.com>
            '''
            import tempfile
            from pathlib import Path

            from catboost import CatBoostRegressor, Pool

            column_descriptions = {label_column: 'Label'}
            column_description_path = tempfile.NamedTemporaryFile(delete=False).name
            with open(column_description_path, 'w') as column_description_file:
                for idx, kind in column_descriptions.items():
                    column_description_file.write('{}\t{}\n'.format(idx, kind))

            train_data = Pool(
                training_data_path,
                column_description=column_description_path,
                has_header=True,
                delimiter=',',
            )

            model = CatBoostRegressor(
                iterations=num_iterations,
                depth=depth,
                learning_rate=learning_rate,
                loss_function=loss_function,
                random_seed=random_seed,
                verbose=True,
                **additional_training_options,
            )

            model.fit(
                train_data,
                cat_features=cat_features,
                init_model=starting_model_path,
                #verbose=False,
                #plot=True,
            )
            Path(model_path).parent.mkdir(parents=True, exist_ok=True)
            model.save_model(model_path)

        import json
        import argparse
        _parser = argparse.ArgumentParser(prog='Catboost train regression', description="Train a CatBoost classifier model.\n\n    Args:\n        training_data_path: Path for the training data in CSV format.\n        model_path: Output path for the trained model in binary CatBoostModel format.\n        starting_model_path: Path for the existing trained model to start from.\n        label_column: Column containing the label data.\n\n        loss_function: The metric to use in training and also selector of the machine learning\n            problem to solve. Default = 'RMSE'. Possible values:\n            'RMSE', 'MAE', 'Quantile:alpha=value', 'LogLinQuantile:alpha=value', 'Poisson', 'MAPE', 'Lq:q=value'\n        num_iterations: Number of trees to add to the ensemble.\n        learning_rate: Step size shrinkage used in update to prevents overfitting.\n            Default value is selected automatically for binary classification with other parameters set to default.\n            In all other cases default is 0.03.\n        depth: Depth of a tree. All trees are the same depth. Default = 6\n        random_seed: Random number seed. Default = 0\n\n        cat_features: A list of Categorical features (indices or names).\n        additional_training_options: A dictionary with additional options to pass to CatBoostRegressor\n\n    Outputs:\n        model: Trained model in binary CatBoostModel format.\n\n    Annotations:\n        author: Alexey Volkov <alexey.volkov@ark-kun.com>")
        _parser.add_argument("--training-data", dest="training_data_path", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--starting-model", dest="starting_model_path", type=str, required=False, default=argparse.SUPPRESS)
        _parser.add_argument("--label-column", dest="label_column", type=int, required=False, default=argparse.SUPPRESS)
        _parser.add_argument("--loss-function", dest="loss_function", type=str, required=False, default=argparse.SUPPRESS)
        _parser.add_argument("--num-iterations", dest="num_iterations", type=int, required=False, default=argparse.SUPPRESS)
        _parser.add_argument("--learning-rate", dest="learning_rate", type=float, required=False, default=argparse.SUPPRESS)
        _parser.add_argument("--depth", dest="depth", type=int, required=False, default=argparse.SUPPRESS)
        _parser.add_argument("--random-seed", dest="random_seed", type=int, required=False, default=argparse.SUPPRESS)
        _parser.add_argument("--cat-features", dest="cat_features", type=json.loads, required=False, default=argparse.SUPPRESS)
        _parser.add_argument("--additional-training-options", dest="additional_training_options", type=json.loads, required=False, default=argparse.SUPPRESS)
        _parser.add_argument("--model", dest="model_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())

        _outputs = catboost_train_regression(**_parsed_args)
      image: python:3.7
    inputs:
      artifacts:
      - {name: chicago-taxi-trips-dataset-Table, path: /tmp/inputs/training_data/data}
    outputs:
      artifacts:
      - {name: catboost-train-regression-model, path: /tmp/outputs/model/data}
    metadata:
      annotations: {pipelines.kubeflow.org/component_spec: '{"description": "Train
          a CatBoost classifier model.\n\n    Args:\n        training_data_path: Path
          for the training data in CSV format.\n        model_path: Output path for
          the trained model in binary CatBoostModel format.\n        starting_model_path:
          Path for the existing trained model to start from.\n        label_column:
          Column containing the label data.\n\n        loss_function: The metric to
          use in training and also selector of the machine learning\n            problem
          to solve. Default = ''RMSE''. Possible values:\n            ''RMSE'', ''MAE'',
          ''Quantile:alpha=value'', ''LogLinQuantile:alpha=value'', ''Poisson'', ''MAPE'',
          ''Lq:q=value''\n        num_iterations: Number of trees to add to the ensemble.\n        learning_rate:
          Step size shrinkage used in update to prevents overfitting.\n            Default
          value is selected automatically for binary classification with other parameters
          set to default.\n            In all other cases default is 0.03.\n        depth:
          Depth of a tree. All trees are the same depth. Default = 6\n        random_seed:
          Random number seed. Default = 0\n\n        cat_features: A list of Categorical
          features (indices or names).\n        additional_training_options: A dictionary
          with additional options to pass to CatBoostRegressor\n\n    Outputs:\n        model:
          Trained model in binary CatBoostModel format.\n\n    Annotations:\n        author:
          Alexey Volkov <alexey.volkov@ark-kun.com>", "implementation": {"container":
          {"args": ["--training-data", {"inputPath": "training_data"}, {"if": {"cond":
          {"isPresent": "starting_model"}, "then": ["--starting-model", {"inputPath":
          "starting_model"}]}}, {"if": {"cond": {"isPresent": "label_column"}, "then":
          ["--label-column", {"inputValue": "label_column"}]}}, {"if": {"cond": {"isPresent":
          "loss_function"}, "then": ["--loss-function", {"inputValue": "loss_function"}]}},
          {"if": {"cond": {"isPresent": "num_iterations"}, "then": ["--num-iterations",
          {"inputValue": "num_iterations"}]}}, {"if": {"cond": {"isPresent": "learning_rate"},
          "then": ["--learning-rate", {"inputValue": "learning_rate"}]}}, {"if": {"cond":
          {"isPresent": "depth"}, "then": ["--depth", {"inputValue": "depth"}]}},
          {"if": {"cond": {"isPresent": "random_seed"}, "then": ["--random-seed",
          {"inputValue": "random_seed"}]}}, {"if": {"cond": {"isPresent": "cat_features"},
          "then": ["--cat-features", {"inputValue": "cat_features"}]}}, {"if": {"cond":
          {"isPresent": "additional_training_options"}, "then": ["--additional-training-options",
          {"inputValue": "additional_training_options"}]}}, "--model", {"outputPath":
          "model"}], "command": ["sh", "-c", "(PIP_DISABLE_PIP_VERSION_CHECK=1 python3
          -m pip install --quiet --no-warn-script-location ''catboost==0.23'' || PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''catboost==0.23''
          --user) && \"$0\" \"$@\"", "python3", "-u", "-c", "def _make_parent_dirs_and_return_path(file_path:
          str):\n    import os\n    os.makedirs(os.path.dirname(file_path), exist_ok=True)\n    return
          file_path\n\ndef catboost_train_regression(\n    training_data_path,\n    model_path,\n    starting_model_path
          = None,\n    label_column = 0,\n\n    loss_function = ''RMSE'',\n    num_iterations
          = 500,\n    learning_rate = None,\n    depth = 6,\n    random_seed = 0,\n\n    cat_features
          = None,\n\n    additional_training_options = {},\n):\n    ''''''Train a
          CatBoost classifier model.\n\n    Args:\n        training_data_path: Path
          for the training data in CSV format.\n        model_path: Output path for
          the trained model in binary CatBoostModel format.\n        starting_model_path:
          Path for the existing trained model to start from.\n        label_column:
          Column containing the label data.\n\n        loss_function: The metric to
          use in training and also selector of the machine learning\n            problem
          to solve. Default = ''RMSE''. Possible values:\n            ''RMSE'', ''MAE'',
          ''Quantile:alpha=value'', ''LogLinQuantile:alpha=value'', ''Poisson'', ''MAPE'',
          ''Lq:q=value''\n        num_iterations: Number of trees to add to the ensemble.\n        learning_rate:
          Step size shrinkage used in update to prevents overfitting.\n            Default
          value is selected automatically for binary classification with other parameters
          set to default.\n            In all other cases default is 0.03.\n        depth:
          Depth of a tree. All trees are the same depth. Default = 6\n        random_seed:
          Random number seed. Default = 0\n\n        cat_features: A list of Categorical
          features (indices or names).\n        additional_training_options: A dictionary
          with additional options to pass to CatBoostRegressor\n\n    Outputs:\n        model:
          Trained model in binary CatBoostModel format.\n\n    Annotations:\n        author:
          Alexey Volkov <alexey.volkov@ark-kun.com>\n    ''''''\n    import tempfile\n    from
          pathlib import Path\n\n    from catboost import CatBoostRegressor, Pool\n\n    column_descriptions
          = {label_column: ''Label''}\n    column_description_path = tempfile.NamedTemporaryFile(delete=False).name\n    with
          open(column_description_path, ''w'') as column_description_file:\n        for
          idx, kind in column_descriptions.items():\n            column_description_file.write(''{}\\t{}\\n''.format(idx,
          kind))\n\n    train_data = Pool(\n        training_data_path,\n        column_description=column_description_path,\n        has_header=True,\n        delimiter='','',\n    )\n\n    model
          = CatBoostRegressor(\n        iterations=num_iterations,\n        depth=depth,\n        learning_rate=learning_rate,\n        loss_function=loss_function,\n        random_seed=random_seed,\n        verbose=True,\n        **additional_training_options,\n    )\n\n    model.fit(\n        train_data,\n        cat_features=cat_features,\n        init_model=starting_model_path,\n        #verbose=False,\n        #plot=True,\n    )\n    Path(model_path).parent.mkdir(parents=True,
          exist_ok=True)\n    model.save_model(model_path)\n\nimport json\nimport
          argparse\n_parser = argparse.ArgumentParser(prog=''Catboost train regression'',
          description=\"Train a CatBoost classifier model.\\n\\n    Args:\\n        training_data_path:
          Path for the training data in CSV format.\\n        model_path: Output path
          for the trained model in binary CatBoostModel format.\\n        starting_model_path:
          Path for the existing trained model to start from.\\n        label_column:
          Column containing the label data.\\n\\n        loss_function: The metric
          to use in training and also selector of the machine learning\\n            problem
          to solve. Default = ''RMSE''. Possible values:\\n            ''RMSE'', ''MAE'',
          ''Quantile:alpha=value'', ''LogLinQuantile:alpha=value'', ''Poisson'', ''MAPE'',
          ''Lq:q=value''\\n        num_iterations: Number of trees to add to the ensemble.\\n        learning_rate:
          Step size shrinkage used in update to prevents overfitting.\\n            Default
          value is selected automatically for binary classification with other parameters
          set to default.\\n            In all other cases default is 0.03.\\n        depth:
          Depth of a tree. All trees are the same depth. Default = 6\\n        random_seed:
          Random number seed. Default = 0\\n\\n        cat_features: A list of Categorical
          features (indices or names).\\n        additional_training_options: A dictionary
          with additional options to pass to CatBoostRegressor\\n\\n    Outputs:\\n        model:
          Trained model in binary CatBoostModel format.\\n\\n    Annotations:\\n        author:
          Alexey Volkov <alexey.volkov@ark-kun.com>\")\n_parser.add_argument(\"--training-data\",
          dest=\"training_data_path\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--starting-model\",
          dest=\"starting_model_path\", type=str, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--label-column\",
          dest=\"label_column\", type=int, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--loss-function\",
          dest=\"loss_function\", type=str, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--num-iterations\",
          dest=\"num_iterations\", type=int, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--learning-rate\",
          dest=\"learning_rate\", type=float, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--depth\",
          dest=\"depth\", type=int, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--random-seed\",
          dest=\"random_seed\", type=int, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--cat-features\",
          dest=\"cat_features\", type=json.loads, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--additional-training-options\",
          dest=\"additional_training_options\", type=json.loads, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--model\",
          dest=\"model_path\", type=_make_parent_dirs_and_return_path, required=True,
          default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n_outputs
          = catboost_train_regression(**_parsed_args)\n"], "image": "python:3.7"}},
          "inputs": [{"name": "training_data", "type": "CSV"}, {"name": "starting_model",
          "optional": true, "type": "CatBoostModel"}, {"default": "0", "name": "label_column",
          "optional": true, "type": "Integer"}, {"default": "RMSE", "name": "loss_function",
          "optional": true, "type": "String"}, {"default": "500", "name": "num_iterations",
          "optional": true, "type": "Integer"}, {"name": "learning_rate", "optional":
          true, "type": "Float"}, {"default": "6", "name": "depth", "optional": true,
          "type": "Integer"}, {"default": "0", "name": "random_seed", "optional":
          true, "type": "Integer"}, {"name": "cat_features", "optional": true, "type":
          "JsonArray"}, {"default": "{}", "name": "additional_training_options", "optional":
          true, "type": "JsonObject"}], "name": "Catboost train regression", "outputs":
          [{"name": "model", "type": "CatBoostModel"}]}', pipelines.kubeflow.org/component_ref: '{"digest":
          "d0fe063537c49dddd3580b1ee29c87fa23606aa31cb8df67a3a8aaf032e946c6", "url":
          "https://raw.githubusercontent.com/kubeflow/pipelines/f97ad2/components/CatBoost/Train_regression/from_CSV/component.yaml"}',
        pipelines.kubeflow.org/arguments.parameters: '{"label_column": "0", "loss_function":
          "RMSE", "num_iterations": "200"}'}
  - name: chicago-taxi-trips-dataset
    container:
      args: []
      command:
      - sh
      - -c
      - |
        set -e -x -o pipefail
        output_path="$0"
        select="$1"
        where="$2"
        limit="$3"
        format="$4"
        mkdir -p "$(dirname "$output_path")"
        curl --get 'https://data.cityofchicago.org/resource/wrvz-psew.'"${format}" \
            --data-urlencode '$limit='"${limit}" \
            --data-urlencode '$where='"${where}" \
            --data-urlencode '$select='"${select}" \
            | tr -d '"' > "$output_path"  # Removing unneeded quotes around all numbers
      - /tmp/outputs/Table/data
      - tips,trip_seconds,trip_miles,pickup_community_area,dropoff_community_area,fare,tolls,extras,trip_total
      - trip_start_timestamp >= "2019-01-01" AND trip_start_timestamp < "2019-02-01"
      - '10000'
      - csv
      image: curlimages/curl
    outputs:
      artifacts:
      - {name: chicago-taxi-trips-dataset-Table, path: /tmp/outputs/Table/data}
    metadata:
      annotations: {author: Alexey Volkov <alexey.volkov@ark-kun.com>, pipelines.kubeflow.org/component_spec: '{"description":
          "City of Chicago Taxi Trips dataset: https://data.cityofchicago.org/Transportation/Taxi-Trips/wrvz-psew\n\nThe
          input parameters configure the SQL query to the database.\nThe dataset is
          pretty big, so limit the number of results using the `Limit` or `Where`
          parameters.\nRead [Socrata dev](https://dev.socrata.com/docs/queries/) for
          the advanced query syntax\n", "implementation": {"container": {"command":
          ["sh", "-c", "set -e -x -o pipefail\noutput_path=\"$0\"\nselect=\"$1\"\nwhere=\"$2\"\nlimit=\"$3\"\nformat=\"$4\"\nmkdir
          -p \"$(dirname \"$output_path\")\"\ncurl --get ''https://data.cityofchicago.org/resource/wrvz-psew.''\"${format}\"
          \\\n    --data-urlencode ''$limit=''\"${limit}\" \\\n    --data-urlencode
          ''$where=''\"${where}\" \\\n    --data-urlencode ''$select=''\"${select}\"
          \\\n    | tr -d ''\"'' > \"$output_path\"  # Removing unneeded quotes around
          all numbers\n", {"outputPath": "Table"}, {"inputValue": "Select"}, {"inputValue":
          "Where"}, {"inputValue": "Limit"}, {"inputValue": "Format"}], "image": "curlimages/curl"}},
          "inputs": [{"default": "trip_start_timestamp>=\"1900-01-01\" AND trip_start_timestamp<\"2100-01-01\"",
          "name": "Where", "type": "String"}, {"default": "1000", "description": "Number
          of rows to return. The rows are randomly sampled.", "name": "Limit", "type":
          "Integer"}, {"default": "trip_id,taxi_id,trip_start_timestamp,trip_end_timestamp,trip_seconds,trip_miles,pickup_census_tract,dropoff_census_tract,pickup_community_area,dropoff_community_area,fare,tips,tolls,extras,trip_total,payment_type,company,pickup_centroid_latitude,pickup_centroid_longitude,pickup_centroid_location,dropoff_centroid_latitude,dropoff_centroid_longitude,dropoff_centroid_location",
          "name": "Select", "type": "String"}, {"default": "csv", "description": "Output
          data format. Suports csv,tsv,cml,rdf,json", "name": "Format", "type": "String"}],
          "metadata": {"annotations": {"author": "Alexey Volkov <alexey.volkov@ark-kun.com>"}},
          "name": "Chicago Taxi Trips dataset", "outputs": [{"description": "Result
          type depends on format. CSV and TSV have header.", "name": "Table"}]}',
        pipelines.kubeflow.org/component_ref: '{"digest": "ecf2f2840c57bd9cb2778c8f529da9b938b81f59294b3f7271cb23b363640343",
          "url": "https://raw.githubusercontent.com/kubeflow/pipelines/e3337b8bdcd63636934954e592d4b32c95b49129/components/datasets/Chicago%20Taxi/component.yaml"}',
        pipelines.kubeflow.org/arguments.parameters: '{"Format": "csv", "Limit": "10000",
          "Select": "tips,trip_seconds,trip_miles,pickup_community_area,dropoff_community_area,fare,tolls,extras,trip_total",
          "Where": "trip_start_timestamp >= \"2019-01-01\" AND trip_start_timestamp
          < \"2019-02-01\""}'}
  - name: convert-catboostmodel-to-applecoremlmodel
    container:
      args: [--model, /tmp/inputs/model/data, --converted-model, /tmp/outputs/converted_model/data]
      command:
      - sh
      - -c
      - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
        'catboost==0.22' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install
        --quiet --no-warn-script-location 'catboost==0.22' --user) && "$0" "$@"
      - python3
      - -u
      - -c
      - |
        def _make_parent_dirs_and_return_path(file_path: str):
            import os
            os.makedirs(os.path.dirname(file_path), exist_ok=True)
            return file_path

        def convert_CatBoostModel_to_AppleCoreMLModel(
            model_path,
            converted_model_path,
        ):
            '''Convert CatBoost model to Apple CoreML format.

            Args:
                model_path: Path of a trained model in binary CatBoost model format.
                converted_model_path: Output path for the converted model.

            Outputs:
                converted_model: Model in Apple CoreML format.

            Annotations:
                author: Alexey Volkov <alexey.volkov@ark-kun.com>
            '''
            from catboost import CatBoost

            model = CatBoost()
            model.load_model(model_path)
            model.save_model(
                converted_model_path,
                format="coreml",
                # export_parameters={'prediction_type': 'probability'},
                # export_parameters={'prediction_type': 'raw'},
            )

        import argparse
        _parser = argparse.ArgumentParser(prog='Convert CatBoostModel to AppleCoreMLModel', description='Convert CatBoost model to Apple CoreML format.\n\n    Args:\n        model_path: Path of a trained model in binary CatBoost model format.\n        converted_model_path: Output path for the converted model.\n\n    Outputs:\n        converted_model: Model in Apple CoreML format.\n\n    Annotations:\n        author: Alexey Volkov <alexey.volkov@ark-kun.com>')
        _parser.add_argument("--model", dest="model_path", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--converted-model", dest="converted_model_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())

        _outputs = convert_CatBoostModel_to_AppleCoreMLModel(**_parsed_args)
      image: python:3.7
    inputs:
      artifacts:
      - {name: catboost-train-regression-model, path: /tmp/inputs/model/data}
    outputs:
      artifacts:
      - {name: convert-catboostmodel-to-applecoremlmodel-converted_model, path: /tmp/outputs/converted_model/data}
    metadata:
      annotations: {pipelines.kubeflow.org/component_spec: '{"description": "Convert
          CatBoost model to Apple CoreML format.\n\n    Args:\n        model_path:
          Path of a trained model in binary CatBoost model format.\n        converted_model_path:
          Output path for the converted model.\n\n    Outputs:\n        converted_model:
          Model in Apple CoreML format.\n\n    Annotations:\n        author: Alexey
          Volkov <alexey.volkov@ark-kun.com>", "implementation": {"container": {"args":
          ["--model", {"inputPath": "model"}, "--converted-model", {"outputPath":
          "converted_model"}], "command": ["sh", "-c", "(PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''catboost==0.22''
          || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
          ''catboost==0.22'' --user) && \"$0\" \"$@\"", "python3", "-u", "-c", "def
          _make_parent_dirs_and_return_path(file_path: str):\n    import os\n    os.makedirs(os.path.dirname(file_path),
          exist_ok=True)\n    return file_path\n\ndef convert_CatBoostModel_to_AppleCoreMLModel(\n    model_path,\n    converted_model_path,\n):\n    ''''''Convert
          CatBoost model to Apple CoreML format.\n\n    Args:\n        model_path:
          Path of a trained model in binary CatBoost model format.\n        converted_model_path:
          Output path for the converted model.\n\n    Outputs:\n        converted_model:
          Model in Apple CoreML format.\n\n    Annotations:\n        author: Alexey
          Volkov <alexey.volkov@ark-kun.com>\n    ''''''\n    from catboost import
          CatBoost\n\n    model = CatBoost()\n    model.load_model(model_path)\n    model.save_model(\n        converted_model_path,\n        format=\"coreml\",\n        #
          export_parameters={''prediction_type'': ''probability''},\n        # export_parameters={''prediction_type'':
          ''raw''},\n    )\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Convert
          CatBoostModel to AppleCoreMLModel'', description=''Convert CatBoost model
          to Apple CoreML format.\\n\\n    Args:\\n        model_path: Path of a trained
          model in binary CatBoost model format.\\n        converted_model_path: Output
          path for the converted model.\\n\\n    Outputs:\\n        converted_model:
          Model in Apple CoreML format.\\n\\n    Annotations:\\n        author: Alexey
          Volkov <alexey.volkov@ark-kun.com>'')\n_parser.add_argument(\"--model\",
          dest=\"model_path\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--converted-model\",
          dest=\"converted_model_path\", type=_make_parent_dirs_and_return_path, required=True,
          default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n_outputs
          = convert_CatBoostModel_to_AppleCoreMLModel(**_parsed_args)\n"], "image":
          "python:3.7"}}, "inputs": [{"name": "model", "type": "CatBoostModel"}],
          "name": "Convert CatBoostModel to AppleCoreMLModel", "outputs": [{"name":
          "converted_model", "type": "AppleCoreMLModel"}]}', pipelines.kubeflow.org/component_ref: '{"digest":
          "7d28bbcdbf1270fe82b63651160407c77ef2ddf5d0352c92ff421b45f03f149b", "url":
          "https://raw.githubusercontent.com/kubeflow/pipelines/f97ad2/components/CatBoost/convert_CatBoostModel_to_AppleCoreMLModel/component.yaml"}'}
  - name: convert-catboostmodel-to-applecoremlmodel-2
    container:
      args: [--model, /tmp/inputs/model/data, --converted-model, /tmp/outputs/converted_model/data]
      command:
      - sh
      - -c
      - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
        'catboost==0.22' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install
        --quiet --no-warn-script-location 'catboost==0.22' --user) && "$0" "$@"
      - python3
      - -u
      - -c
      - |
        def _make_parent_dirs_and_return_path(file_path: str):
            import os
            os.makedirs(os.path.dirname(file_path), exist_ok=True)
            return file_path

        def convert_CatBoostModel_to_AppleCoreMLModel(
            model_path,
            converted_model_path,
        ):
            '''Convert CatBoost model to Apple CoreML format.

            Args:
                model_path: Path of a trained model in binary CatBoost model format.
                converted_model_path: Output path for the converted model.

            Outputs:
                converted_model: Model in Apple CoreML format.

            Annotations:
                author: Alexey Volkov <alexey.volkov@ark-kun.com>
            '''
            from catboost import CatBoost

            model = CatBoost()
            model.load_model(model_path)
            model.save_model(
                converted_model_path,
                format="coreml",
                # export_parameters={'prediction_type': 'probability'},
                # export_parameters={'prediction_type': 'raw'},
            )

        import argparse
        _parser = argparse.ArgumentParser(prog='Convert CatBoostModel to AppleCoreMLModel', description='Convert CatBoost model to Apple CoreML format.\n\n    Args:\n        model_path: Path of a trained model in binary CatBoost model format.\n        converted_model_path: Output path for the converted model.\n\n    Outputs:\n        converted_model: Model in Apple CoreML format.\n\n    Annotations:\n        author: Alexey Volkov <alexey.volkov@ark-kun.com>')
        _parser.add_argument("--model", dest="model_path", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--converted-model", dest="converted_model_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())

        _outputs = convert_CatBoostModel_to_AppleCoreMLModel(**_parsed_args)
      image: python:3.7
    inputs:
      artifacts:
      - {name: catboost-train-classifier-model, path: /tmp/inputs/model/data}
    outputs:
      artifacts:
      - {name: convert-catboostmodel-to-applecoremlmodel-2-converted_model, path: /tmp/outputs/converted_model/data}
    metadata:
      annotations: {pipelines.kubeflow.org/component_spec: '{"description": "Convert
          CatBoost model to Apple CoreML format.\n\n    Args:\n        model_path:
          Path of a trained model in binary CatBoost model format.\n        converted_model_path:
          Output path for the converted model.\n\n    Outputs:\n        converted_model:
          Model in Apple CoreML format.\n\n    Annotations:\n        author: Alexey
          Volkov <alexey.volkov@ark-kun.com>", "implementation": {"container": {"args":
          ["--model", {"inputPath": "model"}, "--converted-model", {"outputPath":
          "converted_model"}], "command": ["sh", "-c", "(PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''catboost==0.22''
          || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
          ''catboost==0.22'' --user) && \"$0\" \"$@\"", "python3", "-u", "-c", "def
          _make_parent_dirs_and_return_path(file_path: str):\n    import os\n    os.makedirs(os.path.dirname(file_path),
          exist_ok=True)\n    return file_path\n\ndef convert_CatBoostModel_to_AppleCoreMLModel(\n    model_path,\n    converted_model_path,\n):\n    ''''''Convert
          CatBoost model to Apple CoreML format.\n\n    Args:\n        model_path:
          Path of a trained model in binary CatBoost model format.\n        converted_model_path:
          Output path for the converted model.\n\n    Outputs:\n        converted_model:
          Model in Apple CoreML format.\n\n    Annotations:\n        author: Alexey
          Volkov <alexey.volkov@ark-kun.com>\n    ''''''\n    from catboost import
          CatBoost\n\n    model = CatBoost()\n    model.load_model(model_path)\n    model.save_model(\n        converted_model_path,\n        format=\"coreml\",\n        #
          export_parameters={''prediction_type'': ''probability''},\n        # export_parameters={''prediction_type'':
          ''raw''},\n    )\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Convert
          CatBoostModel to AppleCoreMLModel'', description=''Convert CatBoost model
          to Apple CoreML format.\\n\\n    Args:\\n        model_path: Path of a trained
          model in binary CatBoost model format.\\n        converted_model_path: Output
          path for the converted model.\\n\\n    Outputs:\\n        converted_model:
          Model in Apple CoreML format.\\n\\n    Annotations:\\n        author: Alexey
          Volkov <alexey.volkov@ark-kun.com>'')\n_parser.add_argument(\"--model\",
          dest=\"model_path\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--converted-model\",
          dest=\"converted_model_path\", type=_make_parent_dirs_and_return_path, required=True,
          default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n_outputs
          = convert_CatBoostModel_to_AppleCoreMLModel(**_parsed_args)\n"], "image":
          "python:3.7"}}, "inputs": [{"name": "model", "type": "CatBoostModel"}],
          "name": "Convert CatBoostModel to AppleCoreMLModel", "outputs": [{"name":
          "converted_model", "type": "AppleCoreMLModel"}]}', pipelines.kubeflow.org/component_ref: '{"digest":
          "7d28bbcdbf1270fe82b63651160407c77ef2ddf5d0352c92ff421b45f03f149b", "url":
          "https://raw.githubusercontent.com/kubeflow/pipelines/f97ad2/components/CatBoost/convert_CatBoostModel_to_AppleCoreMLModel/component.yaml"}'}
  - name: convert-catboostmodel-to-onnx
    container:
      args: [--model, /tmp/inputs/model/data, --converted-model, /tmp/outputs/converted_model/data]
      command:
      - sh
      - -c
      - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
        'catboost==0.22' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install
        --quiet --no-warn-script-location 'catboost==0.22' --user) && "$0" "$@"
      - python3
      - -u
      - -c
      - |
        def _make_parent_dirs_and_return_path(file_path: str):
            import os
            os.makedirs(os.path.dirname(file_path), exist_ok=True)
            return file_path

        def convert_CatBoostModel_to_ONNX(
            model_path,
            converted_model_path,
        ):
            '''Convert CatBoost model to ONNX format.

            Args:
                model_path: Path of a trained model in binary CatBoost model format.
                converted_model_path: Output path for the converted model.

            Outputs:
                converted_model: Model in ONNX format.

            Annotations:
                author: Alexey Volkov <alexey.volkov@ark-kun.com>
            '''
            from catboost import CatBoost

            model = CatBoost()
            model.load_model(model_path)
            model.save_model(converted_model_path, format="onnx")

        import argparse
        _parser = argparse.ArgumentParser(prog='Convert CatBoostModel to ONNX', description='Convert CatBoost model to ONNX format.\n\n    Args:\n        model_path: Path of a trained model in binary CatBoost model format.\n        converted_model_path: Output path for the converted model.\n\n    Outputs:\n        converted_model: Model in ONNX format.\n\n    Annotations:\n        author: Alexey Volkov <alexey.volkov@ark-kun.com>')
        _parser.add_argument("--model", dest="model_path", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--converted-model", dest="converted_model_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())

        _outputs = convert_CatBoostModel_to_ONNX(**_parsed_args)
      image: python:3.7
    inputs:
      artifacts:
      - {name: catboost-train-regression-model, path: /tmp/inputs/model/data}
    outputs:
      artifacts:
      - {name: convert-catboostmodel-to-onnx-converted_model, path: /tmp/outputs/converted_model/data}
    metadata:
      annotations: {pipelines.kubeflow.org/component_spec: '{"description": "Convert
          CatBoost model to ONNX format.\n\n    Args:\n        model_path: Path of
          a trained model in binary CatBoost model format.\n        converted_model_path:
          Output path for the converted model.\n\n    Outputs:\n        converted_model:
          Model in ONNX format.\n\n    Annotations:\n        author: Alexey Volkov
          <alexey.volkov@ark-kun.com>", "implementation": {"container": {"args": ["--model",
          {"inputPath": "model"}, "--converted-model", {"outputPath": "converted_model"}],
          "command": ["sh", "-c", "(PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip
          install --quiet --no-warn-script-location ''catboost==0.22'' || PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''catboost==0.22''
          --user) && \"$0\" \"$@\"", "python3", "-u", "-c", "def _make_parent_dirs_and_return_path(file_path:
          str):\n    import os\n    os.makedirs(os.path.dirname(file_path), exist_ok=True)\n    return
          file_path\n\ndef convert_CatBoostModel_to_ONNX(\n    model_path,\n    converted_model_path,\n):\n    ''''''Convert
          CatBoost model to ONNX format.\n\n    Args:\n        model_path: Path of
          a trained model in binary CatBoost model format.\n        converted_model_path:
          Output path for the converted model.\n\n    Outputs:\n        converted_model:
          Model in ONNX format.\n\n    Annotations:\n        author: Alexey Volkov
          <alexey.volkov@ark-kun.com>\n    ''''''\n    from catboost import CatBoost\n\n    model
          = CatBoost()\n    model.load_model(model_path)\n    model.save_model(converted_model_path,
          format=\"onnx\")\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Convert
          CatBoostModel to ONNX'', description=''Convert CatBoost model to ONNX format.\\n\\n    Args:\\n        model_path:
          Path of a trained model in binary CatBoost model format.\\n        converted_model_path:
          Output path for the converted model.\\n\\n    Outputs:\\n        converted_model:
          Model in ONNX format.\\n\\n    Annotations:\\n        author: Alexey Volkov
          <alexey.volkov@ark-kun.com>'')\n_parser.add_argument(\"--model\", dest=\"model_path\",
          type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--converted-model\",
          dest=\"converted_model_path\", type=_make_parent_dirs_and_return_path, required=True,
          default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n_outputs
          = convert_CatBoostModel_to_ONNX(**_parsed_args)\n"], "image": "python:3.7"}},
          "inputs": [{"name": "model", "type": "CatBoostModel"}], "name": "Convert
          CatBoostModel to ONNX", "outputs": [{"name": "converted_model", "type":
          "ONNX"}]}', pipelines.kubeflow.org/component_ref: '{"digest": "baa36dae2c0cc1c83007086b7bb59344cd34312b42da42519f053ca6b243e07f",
          "url": "https://raw.githubusercontent.com/kubeflow/pipelines/f97ad2/components/CatBoost/convert_CatBoostModel_to_ONNX/component.yaml"}'}
  - name: convert-catboostmodel-to-onnx-2
    container:
      args: [--model, /tmp/inputs/model/data, --converted-model, /tmp/outputs/converted_model/data]
      command:
      - sh
      - -c
      - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
        'catboost==0.22' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install
        --quiet --no-warn-script-location 'catboost==0.22' --user) && "$0" "$@"
      - python3
      - -u
      - -c
      - |
        def _make_parent_dirs_and_return_path(file_path: str):
            import os
            os.makedirs(os.path.dirname(file_path), exist_ok=True)
            return file_path

        def convert_CatBoostModel_to_ONNX(
            model_path,
            converted_model_path,
        ):
            '''Convert CatBoost model to ONNX format.

            Args:
                model_path: Path of a trained model in binary CatBoost model format.
                converted_model_path: Output path for the converted model.

            Outputs:
                converted_model: Model in ONNX format.

            Annotations:
                author: Alexey Volkov <alexey.volkov@ark-kun.com>
            '''
            from catboost import CatBoost

            model = CatBoost()
            model.load_model(model_path)
            model.save_model(converted_model_path, format="onnx")

        import argparse
        _parser = argparse.ArgumentParser(prog='Convert CatBoostModel to ONNX', description='Convert CatBoost model to ONNX format.\n\n    Args:\n        model_path: Path of a trained model in binary CatBoost model format.\n        converted_model_path: Output path for the converted model.\n\n    Outputs:\n        converted_model: Model in ONNX format.\n\n    Annotations:\n        author: Alexey Volkov <alexey.volkov@ark-kun.com>')
        _parser.add_argument("--model", dest="model_path", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--converted-model", dest="converted_model_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())

        _outputs = convert_CatBoostModel_to_ONNX(**_parsed_args)
      image: python:3.7
    inputs:
      artifacts:
      - {name: catboost-train-classifier-model, path: /tmp/inputs/model/data}
    outputs:
      artifacts:
      - {name: convert-catboostmodel-to-onnx-2-converted_model, path: /tmp/outputs/converted_model/data}
    metadata:
      annotations: {pipelines.kubeflow.org/component_spec: '{"description": "Convert
          CatBoost model to ONNX format.\n\n    Args:\n        model_path: Path of
          a trained model in binary CatBoost model format.\n        converted_model_path:
          Output path for the converted model.\n\n    Outputs:\n        converted_model:
          Model in ONNX format.\n\n    Annotations:\n        author: Alexey Volkov
          <alexey.volkov@ark-kun.com>", "implementation": {"container": {"args": ["--model",
          {"inputPath": "model"}, "--converted-model", {"outputPath": "converted_model"}],
          "command": ["sh", "-c", "(PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip
          install --quiet --no-warn-script-location ''catboost==0.22'' || PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''catboost==0.22''
          --user) && \"$0\" \"$@\"", "python3", "-u", "-c", "def _make_parent_dirs_and_return_path(file_path:
          str):\n    import os\n    os.makedirs(os.path.dirname(file_path), exist_ok=True)\n    return
          file_path\n\ndef convert_CatBoostModel_to_ONNX(\n    model_path,\n    converted_model_path,\n):\n    ''''''Convert
          CatBoost model to ONNX format.\n\n    Args:\n        model_path: Path of
          a trained model in binary CatBoost model format.\n        converted_model_path:
          Output path for the converted model.\n\n    Outputs:\n        converted_model:
          Model in ONNX format.\n\n    Annotations:\n        author: Alexey Volkov
          <alexey.volkov@ark-kun.com>\n    ''''''\n    from catboost import CatBoost\n\n    model
          = CatBoost()\n    model.load_model(model_path)\n    model.save_model(converted_model_path,
          format=\"onnx\")\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Convert
          CatBoostModel to ONNX'', description=''Convert CatBoost model to ONNX format.\\n\\n    Args:\\n        model_path:
          Path of a trained model in binary CatBoost model format.\\n        converted_model_path:
          Output path for the converted model.\\n\\n    Outputs:\\n        converted_model:
          Model in ONNX format.\\n\\n    Annotations:\\n        author: Alexey Volkov
          <alexey.volkov@ark-kun.com>'')\n_parser.add_argument(\"--model\", dest=\"model_path\",
          type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--converted-model\",
          dest=\"converted_model_path\", type=_make_parent_dirs_and_return_path, required=True,
          default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n_outputs
          = convert_CatBoostModel_to_ONNX(**_parsed_args)\n"], "image": "python:3.7"}},
          "inputs": [{"name": "model", "type": "CatBoostModel"}], "name": "Convert
          CatBoostModel to ONNX", "outputs": [{"name": "converted_model", "type":
          "ONNX"}]}', pipelines.kubeflow.org/component_ref: '{"digest": "baa36dae2c0cc1c83007086b7bb59344cd34312b42da42519f053ca6b243e07f",
          "url": "https://raw.githubusercontent.com/kubeflow/pipelines/f97ad2/components/CatBoost/convert_CatBoostModel_to_ONNX/component.yaml"}'}
  - name: pandas-transform-dataframe-in-csv-format
    container:
      args: [--table, /tmp/inputs/table/data, --transform-code, 'df.insert(0, "was_tipped",
          df["tips"] > 0); del df["tips"]', --transformed-table, /tmp/outputs/transformed_table/data]
      command:
      - sh
      - -c
      - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
        'pandas==1.0.4' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install
        --quiet --no-warn-script-location 'pandas==1.0.4' --user) && "$0" "$@"
      - python3
      - -u
      - -c
      - |
        def _make_parent_dirs_and_return_path(file_path: str):
            import os
            os.makedirs(os.path.dirname(file_path), exist_ok=True)
            return file_path

        def Pandas_Transform_DataFrame_in_CSV_format(
            table_path,
            transformed_table_path,
            transform_code,
        ):
            '''Transform DataFrame loaded from a CSV file.

            Inputs:
                table: Table to transform.
                transform_code: Transformation code. Code is written in Python and can consist of multiple lines.
                    The DataFrame variable is called "df".
                    Examples:
                    - `df['prod'] = df['X'] * df['Y']`
                    - `df = df[['X', 'prod']]`
                    - `df.insert(0, "is_positive", df["X"] > 0)`

            Outputs:
                transformed_table: Transformed table.

            Annotations:
                author: Alexey Volkov <alexey.volkov@ark-kun.com>
            '''
            import pandas

            df = pandas.read_csv(
                table_path,
            )
            exec(transform_code)
            df.to_csv(
                transformed_table_path,
                index=False,
            )

        import argparse
        _parser = argparse.ArgumentParser(prog='Pandas Transform DataFrame in CSV format', description='Transform DataFrame loaded from a CSV file.\n\n    Inputs:\n        table: Table to transform.\n        transform_code: Transformation code. Code is written in Python and can consist of multiple lines.\n            The DataFrame variable is called "df".\n            Examples:\n            - `df[\'prod\'] = df[\'X\'] * df[\'Y\']`\n            - `df = df[[\'X\', \'prod\']]`\n            - `df.insert(0, "is_positive", df["X"] > 0)`\n\n    Outputs:\n        transformed_table: Transformed table.\n\n    Annotations:\n        author: Alexey Volkov <alexey.volkov@ark-kun.com>')
        _parser.add_argument("--table", dest="table_path", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--transform-code", dest="transform_code", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--transformed-table", dest="transformed_table_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())

        _outputs = Pandas_Transform_DataFrame_in_CSV_format(**_parsed_args)
      image: python:3.7
    inputs:
      artifacts:
      - {name: chicago-taxi-trips-dataset-Table, path: /tmp/inputs/table/data}
    outputs:
      artifacts:
      - {name: pandas-transform-dataframe-in-csv-format-transformed_table, path: /tmp/outputs/transformed_table/data}
    metadata:
      annotations: {pipelines.kubeflow.org/component_spec: '{"description": "Transform
          DataFrame loaded from a CSV file.\n\n    Inputs:\n        table: Table to
          transform.\n        transform_code: Transformation code. Code is written
          in Python and can consist of multiple lines.\n            The DataFrame
          variable is called \"df\".\n            Examples:\n            - `df[''prod'']
          = df[''X''] * df[''Y'']`\n            - `df = df[[''X'', ''prod'']]`\n            -
          `df.insert(0, \"is_positive\", df[\"X\"] > 0)`\n\n    Outputs:\n        transformed_table:
          Transformed table.\n\n    Annotations:\n        author: Alexey Volkov <alexey.volkov@ark-kun.com>",
          "implementation": {"container": {"args": ["--table", {"inputPath": "table"},
          "--transform-code", {"inputValue": "transform_code"}, "--transformed-table",
          {"outputPath": "transformed_table"}], "command": ["sh", "-c", "(PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''pandas==1.0.4''
          || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
          ''pandas==1.0.4'' --user) && \"$0\" \"$@\"", "python3", "-u", "-c", "def
          _make_parent_dirs_and_return_path(file_path: str):\n    import os\n    os.makedirs(os.path.dirname(file_path),
          exist_ok=True)\n    return file_path\n\ndef Pandas_Transform_DataFrame_in_CSV_format(\n    table_path,\n    transformed_table_path,\n    transform_code,\n):\n    ''''''Transform
          DataFrame loaded from a CSV file.\n\n    Inputs:\n        table: Table to
          transform.\n        transform_code: Transformation code. Code is written
          in Python and can consist of multiple lines.\n            The DataFrame
          variable is called \"df\".\n            Examples:\n            - `df[''prod'']
          = df[''X''] * df[''Y'']`\n            - `df = df[[''X'', ''prod'']]`\n            -
          `df.insert(0, \"is_positive\", df[\"X\"] > 0)`\n\n    Outputs:\n        transformed_table:
          Transformed table.\n\n    Annotations:\n        author: Alexey Volkov <alexey.volkov@ark-kun.com>\n    ''''''\n    import
          pandas\n\n    df = pandas.read_csv(\n        table_path,\n    )\n    exec(transform_code)\n    df.to_csv(\n        transformed_table_path,\n        index=False,\n    )\n\nimport
          argparse\n_parser = argparse.ArgumentParser(prog=''Pandas Transform DataFrame
          in CSV format'', description=''Transform DataFrame loaded from a CSV file.\\n\\n    Inputs:\\n        table:
          Table to transform.\\n        transform_code: Transformation code. Code
          is written in Python and can consist of multiple lines.\\n            The
          DataFrame variable is called \"df\".\\n            Examples:\\n            -
          `df[\\''prod\\''] = df[\\''X\\''] * df[\\''Y\\'']`\\n            - `df =
          df[[\\''X\\'', \\''prod\\'']]`\\n            - `df.insert(0, \"is_positive\",
          df[\"X\"] > 0)`\\n\\n    Outputs:\\n        transformed_table: Transformed
          table.\\n\\n    Annotations:\\n        author: Alexey Volkov <alexey.volkov@ark-kun.com>'')\n_parser.add_argument(\"--table\",
          dest=\"table_path\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--transform-code\",
          dest=\"transform_code\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--transformed-table\",
          dest=\"transformed_table_path\", type=_make_parent_dirs_and_return_path,
          required=True, default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n_outputs
          = Pandas_Transform_DataFrame_in_CSV_format(**_parsed_args)\n"], "image":
          "python:3.7"}}, "inputs": [{"name": "table", "type": "CSV"}, {"name": "transform_code",
          "type": "PythonCode"}], "name": "Pandas Transform DataFrame in CSV format",
          "outputs": [{"name": "transformed_table", "type": "CSV"}]}', pipelines.kubeflow.org/component_ref: '{"digest":
          "cbadb4e1147f0f49fe8c0dc9e08ced099d1ee18d22a762d656762e9f02104872", "url":
          "https://raw.githubusercontent.com/kubeflow/pipelines/e69a6694/components/pandas/Transform_DataFrame/in_CSV_format/component.yaml"}',
        pipelines.kubeflow.org/arguments.parameters: '{"transform_code": "df.insert(0,
          \"was_tipped\", df[\"tips\"] > 0); del df[\"tips\"]"}'}
  arguments:
    parameters: []
  serviceAccountName: pipeline-runner
